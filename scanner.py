import requests
import time
import os
import logging
from datetime import datetime
from dotenv import load_dotenv

# Export edilecek fonksiyonlarÄ± belirt
__all__ = ['wait_for_new_mexc_futures']

# Logging konfigÃ¼rasyonu
def setup_logging():
    """Log dosyasÄ±nÄ± ayarla"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('mexc_new_tokens.log', encoding='utf-8'),
            logging.StreamHandler()  # Console'a da yazdÄ±r
        ]
    )
    return logging.getLogger(__name__)

def get_mexc_futures_pairs(logger, headers):
    """MEXC'teki tÃ¼m futures Ã§iftlerini Ã§eker."""
    url = "https://api.mexc.com/api/v3/exchangeInfo"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status() # HTTP hatalarÄ±nÄ± yakala
        
        current_pairs = set()
        for symbol_info in response.json()['symbols']:
            # Futures tokenleri iÃ§in USDT Ã§iftlerini ve aktif iÅŸlemde olanlarÄ± al
            if symbol_info['symbol'].endswith('USDT') and symbol_info['status'] == 'TRADING':
                current_pairs.add(symbol_info['symbol'])
        return current_pairs
    except requests.exceptions.RequestException as e:
        logger.error(f"API isteÄŸi hatasÄ±: {e}")
        return None
    except KeyError:
        logger.error("API yanÄ±tÄ±nda 'symbols' anahtarÄ± bulunamadÄ± veya yanÄ±t beklenenden farklÄ±.")
        return None
    except Exception as e:
        logger.error(f"Piyasa Ã§iftlerini Ã§ekerken beklenmeyen hata: {e}")
        return None

def wait_for_new_mexc_futures():
    """Yeni futures token listelenene kadar bekler ve ilk yeni tokeni dÃ¶ndÃ¼rÃ¼r"""
    
    # Logger'Ä± baÅŸlat
    logger = setup_logging()
    
    # .env dosyasÄ±ndan API key'i al
    load_dotenv()
    api_key = os.getenv('MEXC_API_KEY')
    
    headers = {}
    if api_key:
        headers['X-MEXC-APIKEY'] = api_key
    
    logger.info("MEXC yeni token tarayÄ±cÄ±sÄ± baÅŸlatÄ±ldÄ±")
    
    # BaÅŸlangÄ±Ã§ Ã§iftlerini al
    initial_pairs = None
    while initial_pairs is None:
        logger.info("BaÅŸlangÄ±Ã§ futures Ã§iftleri listesi Ã§ekiliyor...")
        initial_pairs = get_mexc_futures_pairs(logger, headers)
        if initial_pairs is None:
            logger.warning("BaÅŸlangÄ±Ã§ Ã§iftleri Ã§ekilemedi, 30 saniye sonra tekrar denenecek.")
            time.sleep(30) # Hata durumunda bekle
    
    logger.info(f"BaÅŸlangÄ±Ã§: {len(initial_pairs)} futures Ã§ifti bulundu.")
    
    # Yeni token iÃ§in sÃ¼rekli kontrol
    while True:
        try:
            current_pairs = get_mexc_futures_pairs(logger, headers)
            if current_pairs is None:
                logger.warning("GÃ¼ncel Ã§iftler Ã§ekilemedi, bir sonraki dÃ¶ngÃ¼de tekrar denenecek.")
                time.sleep(10) # Hata durumunda beklemeden Ã¶nce 10 saniye bekle
                continue

            # Yeni Ã§ift var mÄ± kontrol et
            new_pairs = current_pairs - initial_pairs
            
            if new_pairs:
                new_token = list(new_pairs)[0]
                
                # Log'a yaz
                logger.info(f"ğŸš€ YENÄ° TOKEN BULUNDU: {new_token}")
                logger.info(f"Token: {new_token} - Tarih: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                print(f"ğŸš€ Yeni futures token bulundu: {new_token}")
                
                # Yeni token bulunduÄŸunda initial_pairs'Ä± gÃ¼ncelle
                initial_pairs = current_pairs 
                
                return new_token
            
            # Her 10 kontrol'da bir durum log'u
            if not hasattr(wait_for_new_mexc_futures, 'check_count'):
                wait_for_new_mexc_futures.check_count = 0
            
            wait_for_new_mexc_futures.check_count += 1
            
            if wait_for_new_mexc_futures.check_count % 10 == 0:
                logger.info(f"Tarama devam ediyor... ({wait_for_new_mexc_futures.check_count} kontrol yapÄ±ldÄ±)")
            
            time.sleep(10)  # 10 saniye bekle
            
        except Exception as e:
            logger.error(f"Kontrol dÃ¶ngÃ¼sÃ¼nde beklenmeyen hata: {e}")
            time.sleep(30) # Hata durumunda 30 saniye bekle